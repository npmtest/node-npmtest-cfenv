{"/home/travis/build/npmtest/node-npmtest-cfenv/test.js":"/* istanbul instrument in package npmtest_cfenv */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cfenv/lib.npmtest_cfenv.js":"/* istanbul instrument in package npmtest_cfenv */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cfenv = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cfenv = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cfenv/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cfenv && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cfenv */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cfenv\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cfenv.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cfenv.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cfenv.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cfenv.__dirname + '/lib.npmtest_cfenv.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cfenv/node_modules/cfenv/lib/cfenv.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var AppEnv, URL, _, cfenv, fs, getApp, getBind, getName, getPort, getServices, getURLs, pkg, ports, throwError, yaml;\n\n  fs = require(\"fs\");\n\n  URL = require(\"url\");\n\n  pkg = require(\"../package.json\");\n\n  _ = require(\"underscore\");\n\n  ports = require(\"ports\");\n\n  yaml = require(\"js-yaml\");\n\n  cfenv = exports;\n\n  cfenv.getAppEnv = function(options) {\n    if (options == null) {\n      options = {};\n    }\n    return new AppEnv(options);\n  };\n\n  AppEnv = (function() {\n    function AppEnv(options) {\n      if (options == null) {\n        options = {};\n      }\n      this.isLocal = process.env.VCAP_APPLICATION == null;\n      if (!this.isLocal) {\n        try {\n          JSON.parse(process.env.VCAP_APPLICATION);\n        } catch (error) {\n          this.isLocal = true;\n        }\n      }\n      this.app = getApp(this, options);\n      this.services = getServices(this, options);\n      this.name = getName(this, options);\n      this.port = getPort(this);\n      this.bind = getBind(this);\n      this.urls = getURLs(this, options);\n      this.url = this.urls[0];\n    }\n\n    AppEnv.prototype.toJSON = function() {\n      return {\n        app: this.app,\n        services: this.services,\n        isLocal: this.isLocal,\n        name: this.name,\n        port: this.port,\n        bind: this.bind,\n        urls: this.urls,\n        url: this.url\n      };\n    };\n\n    AppEnv.prototype.getServices = function() {\n      var i, len, ref, result, service, services, type;\n      result = {};\n      ref = this.services;\n      for (type in ref) {\n        services = ref[type];\n        for (i = 0, len = services.length; i < len; i++) {\n          service = services[i];\n          result[service.name] = service;\n        }\n      }\n      return result;\n    };\n\n    AppEnv.prototype.getService = function(spec) {\n      var matches, name, service, services;\n      if (_.isRegExp(spec)) {\n        matches = function(name) {\n          return name.match(spec);\n        };\n      } else {\n        spec = \"\" + spec;\n        matches = function(name) {\n          return name === spec;\n        };\n      }\n      services = this.getServices();\n      for (name in services) {\n        service = services[name];\n        if (matches(name)) {\n          return service;\n        }\n      }\n      return null;\n    };\n\n    AppEnv.prototype.getServiceURL = function(spec, replacements) {\n      var credentials, key, password, purl, service, url, userid, value;\n      if (replacements == null) {\n        replacements = {};\n      }\n      service = this.getService(spec);\n      credentials = service != null ? service.credentials : void 0;\n      if (credentials == null) {\n        return null;\n      }\n      replacements = _.clone(replacements);\n      if (replacements.url) {\n        url = credentials[replacements.url];\n      } else {\n        url = credentials.url || credentials.uri;\n      }\n      if (url == null) {\n        return null;\n      }\n      delete replacements.url;\n      if (_.isEmpty(replacements)) {\n        return url;\n      }\n      purl = URL.parse(url);\n      for (key in replacements) {\n        value = replacements[key];\n        if (key === \"auth\") {\n          userid = value[0], password = value[1];\n          purl[key] = credentials[userid] + \":\" + credentials[password];\n        } else {\n          purl[key] = credentials[value];\n        }\n      }\n      return URL.format(purl);\n    };\n\n    AppEnv.prototype.getServiceCreds = function(spec) {\n      var service;\n      service = this.getService(spec);\n      if (service == null) {\n        return null;\n      }\n      return service.credentials || {};\n    };\n\n    return AppEnv;\n\n  })();\n\n  getApp = function(appEnv, options) {\n    var e, envValue, locValue, ref, string;\n    string = process.env.VCAP_APPLICATION;\n    envValue = {};\n    if (string != null) {\n      try {\n        envValue = JSON.parse(string);\n      } catch (error) {\n        e = error;\n        throwError(\"env var VCAP_APPLICATION is not JSON: /\" + string + \"/\");\n      }\n    }\n    if (!appEnv.isLocal) {\n      return envValue;\n    }\n    locValue = options != null ? (ref = options.vcap) != null ? ref.application : void 0 : void 0;\n    if (locValue != null) {\n      return locValue;\n    }\n    return envValue;\n  };\n\n  getServices = function(appEnv, options) {\n    var e, envValue, locValue, ref, string;\n    string = process.env.VCAP_SERVICES;\n    envValue = {};\n    if (string != null) {\n      try {\n        envValue = JSON.parse(string);\n      } catch (error) {\n        e = error;\n        throwError(\"env var VCAP_SERVICES is not JSON: /\" + string + \"/\");\n      }\n    }\n    if (!appEnv.isLocal) {\n      return envValue;\n    }\n    locValue = options != null ? (ref = options.vcap) != null ? ref.services : void 0 : void 0;\n    if (locValue != null) {\n      return locValue;\n    }\n    return envValue;\n  };\n\n  getPort = function(appEnv) {\n    var port, portString;\n    portString = process.env.PORT || process.env.CF_INSTANCE_PORT || process.env.VCAP_APP_PORT;\n    if (portString == null) {\n      if (appEnv.name == null) {\n        return 3000;\n      }\n      portString = \"\" + (ports.getPort(appEnv.name));\n    }\n    port = parseInt(portString, 10);\n    if (isNaN(port)) {\n      throwError(\"invalid PORT value: /\" + portString + \"/\");\n    }\n    return port;\n  };\n\n  getName = function(appEnv, options) {\n    var pObject, pString, ref, val, yObject, yString;\n    if (options.name != null) {\n      return options.name;\n    }\n    val = (ref = appEnv.app) != null ? ref.name : void 0;\n    if (val != null) {\n      return val;\n    }\n    if (fs.existsSync(\"manifest.yml\")) {\n      yString = fs.readFileSync(\"manifest.yml\", \"utf8\");\n      yObject = yaml.safeLoad(yString, {\n        filename: \"manifest.yml\"\n      });\n      if (yObject.applications != null) {\n        yObject = yObject.applications[0];\n      }\n      if (yObject.name != null) {\n        return yObject.name;\n      }\n    }\n    if (fs.existsSync(\"package.json\")) {\n      pString = fs.readFileSync(\"package.json\", \"utf8\");\n      try {\n        pObject = JSON.parse(pString);\n      } catch (error) {\n        pObject = null;\n      }\n      if (pObject != null ? pObject.name : void 0) {\n        return pObject.name;\n      }\n    }\n    return null;\n  };\n\n  getBind = function(appEnv) {\n    var ref;\n    return ((ref = appEnv.app) != null ? ref.host : void 0) || \"localhost\";\n  };\n\n  getURLs = function(appEnv, options) {\n    var protocol, ref, uri, uris, urls;\n    uris = (ref = appEnv.app) != null ? ref.uris : void 0;\n    if (appEnv.isLocal) {\n      uris = [\"localhost:\" + appEnv.port];\n    } else {\n      if (uris == null) {\n        uris = [\"localhost\"];\n      }\n    }\n    protocol = options.protocol;\n    if (protocol == null) {\n      if (appEnv.isLocal) {\n        protocol = \"http:\";\n      } else {\n        protocol = \"https:\";\n      }\n    }\n    urls = (function() {\n      var i, len, results;\n      results = [];\n      for (i = 0, len = uris.length; i < len; i++) {\n        uri = uris[i];\n        results.push(protocol + \"//\" + uri);\n      }\n      return results;\n    })();\n    return urls;\n  };\n\n  throwError = function(message) {\n    message = pkg.name + \": \" + message;\n    console.log(\"error: \" + message);\n    throw new Error(message);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-cfenv/node_modules/cfenv/server.js":"// Licensed under the Apache License. See footer for details.\n\nrequire(\"./lib/server\").main()\n\n//------------------------------------------------------------------------------\n// Copyright IBM Corp. 2014\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//------------------------------------------------------------------------------\n","/home/travis/build/npmtest/node-npmtest-cfenv/node_modules/cfenv/lib/server.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var JL, JS, cfenv, generateDump, http;\n\n  http = require(\"http\");\n\n  cfenv = require(\"..\");\n\n  exports.main = function() {\n    var appEnv, dump, server;\n    appEnv = cfenv.getAppEnv();\n    dump = generateDump(appEnv);\n    server = http.createServer();\n    server.on(\"request\", function(request, response) {\n      response.writeHead(200, {\n        \"Content-Type\": \"text/plain\"\n      });\n      return response.end(dump);\n    });\n    return server.listen(appEnv.port, appEnv.bind, function() {\n      return console.log(\"server starting on \" + appEnv.url);\n    });\n  };\n\n  generateDump = function(appEnv) {\n    var result, serviceURL, services;\n    result = [];\n    result.push(\"cfenv.getAppEnv(): \" + (JL(appEnv)));\n    services = appEnv.getServices();\n    result.push(\"appEnv.getServices(): \" + (JL(services)));\n    serviceURL = appEnv.getServiceURL(\"cf-env-test\", {\n      pathname: \"database\",\n      auth: [\"username\", \"password\"]\n    });\n    result.push(\"appEnv.getServiceURL(): \" + serviceURL);\n    return result.join(\"\\n\\n\");\n  };\n\n  JS = function(object) {\n    return JSON.stringify(object);\n  };\n\n  JL = function(object) {\n    return JSON.stringify(object, null, 4);\n  };\n\n  if (require.main === module) {\n    exports.main();\n  }\n\n}).call(this);\n"}